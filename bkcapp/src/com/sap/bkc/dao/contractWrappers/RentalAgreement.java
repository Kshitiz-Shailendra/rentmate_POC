package com.sap.bkc.dao.contractWrappers;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.2.1.
 */
public final class RentalAgreement extends Contract {
    private static final String BINARY = "6060604052341561000c57fe5b60405161097038038061097083398101604090815281516020830151918301519083019291909101905b825161004990600290602086019061009b565b50815161005d90600390602085019061009b565b5060048054600160a060020a03328116600160a060020a0319928316179092556005805492841692909116919091179055426000555b50505061013b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100dc57805160ff1916838001178555610109565b82800160010185558215610109579182015b828111156101095782518255916020019190600101906100ee565b5b5061011692915061011a565b5090565b61013891905b808211156101165760008155600101610120565b5090565b90565b6108268061014a6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632fd949ca811461006657806382996d9f14610078578063b4bd778414610108578063ba83e2a6146101d6578063d9e8843f146101f8575bfe5b341561006e57fe5b610076610205565b005b341561008057fe5b610088610294565b6040805160208082528351818301528351919283929083019185019080838382156100ce575b8051825260208311156100ce57601f1990920191602091820191016100ae565b505050905090810190601f1680156100fa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561011057fe5b61011861031f565b604051808060200185815260200184600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a03168152602001828103825286818151815260200191508051906020019080838360008314610199575b80518252602083111561019957601f199092019160209182019101610179565b505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34156101de57fe5b6101e6610552565b60408051918252519081900360200190f35b610076600435610558565b005b60045433600160a060020a039081169116146102215760006000fd5b600454604051600160a060020a039182169130163180156108fc02916000818181858888f19350505050151561025357fe5b600580546002919074ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000835b02179055505b5b565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156103175780601f106102ec57610100808354040283529160200191610317565b820191906000526020600020905b8154815290600101906020018083116102fa57829003601f168201915b505050505081565b6103276107a8565b6000600060006103356107a8565b60026040518059106103445750595b90808252806020026020018201604052801561037a57816020015b6103676107cc565b81526020019060019003908161035f5790505b506002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815293945061040f9392918301828280156104055780601f106103da57610100808354040283529160200191610405565b820191906000526020600020905b8154815290600101906020018083116103e857829003601f168201915b50505050506105ec565b81600081518110151561041e57fe5b602090810291909101810191909152600380546040805160026001841615610100026000190190931692909204601f81018590048502830185019091528082526104c0939192918301828280156104055780601f106103da57610100808354040283529160200191610405565b820191906000526020600020905b8154815290600101906020018083116103e857829003601f168201915b50505050506105ec565b8160018151811015156104cf57fe5b9060200190602002018190525061052b8161051f604060405190810160405280600181526020017f2c000000000000000000000000000000000000000000000000000000000000008152506105ec565b9063ffffffff61061516565b600054600554600454929750909550600160a060020a0390811694501691505b5090919293565b60015481565b60055433600160a060020a039081169116146105745760006000fd5b6001805b60055474010000000000000000000000000000000000000000900460ff1660028111156105a157fe5b146105ac5760006000fd5b600454604051600160a060020a039091169083156108fc029084906000818181858888f1935050505015156105dd57fe5b60018054810190555b5b505b50565b6105f46107cc565b50604080518082019091528151815260208281019082018190525b50919050565b61061d6107a8565b600060006106296107a8565b600085516000141561064b576040805160208101909152600081529450610755565b60018651038760000151029350600092505b855183101561069257858381518110151561067457fe5b9060200190602002015160000151840193505b60019092019161065d565b836040518059106106a05750595b908082528060200260200182016040525b5060009350915050602081015b8551831015610751576107058187858151811015156106d957fe5b906020019060200201516020015188868151811015156106f557fe5b602090810290910101515161075f565b858381518110151561071357fe5b602090810290910101515186519101906000190183101561074557610741818860200151896000015161075f565b8651015b5b6001909201916106be565b8194505b5050505092915050565b60005b602082106107845782518452602093840193909201915b602082039150610762565b6001826020036101000a039050801983511681855116818117865250505b50505050565b60408051602081019091526000815290565b60408051602081019091526000815290565b604080518082019091526000808252602082015290565b6040805180820190915260008082526020820152905600a165627a7a72305820b648a69597bffd31bbf8f4739371c1ca0acbc5a82996fb7afaee8952a91e03350029";

    private RentalAgreement(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private RentalAgreement(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<TransactionReceipt> terminateContract() {
        Function function = new Function("terminateContract", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> rent() {
        Function function = new Function("rent", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<List<Type>> getAgreementDetails() {
        Function function = new Function("getAgreementDetails", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        return executeCallMultipleValueReturnAsync(function);
    }

    public Future<Uint256> rentPaidCount() {
        Function function = new Function("rentPaidCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> payRent(Uint256 rent) {
        Function function = new Function("payRent", Arrays.<Type>asList(rent), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public static Future<RentalAgreement> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Utf8String _rent, Utf8String _PropertyRegNo, Address _tenant) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_rent, _PropertyRegNo, _tenant));
        return deployAsync(RentalAgreement.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Future<RentalAgreement> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Utf8String _rent, Utf8String _PropertyRegNo, Address _tenant) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_rent, _PropertyRegNo, _tenant));
        return deployAsync(RentalAgreement.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static RentalAgreement load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new RentalAgreement(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static RentalAgreement load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new RentalAgreement(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
