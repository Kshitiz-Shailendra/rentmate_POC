package com.sap.bkc.dao.contractWrappers;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.2.1.
 */
public final class RentalAgreement extends Contract {
    private static final String BINARY = "6060604052341561000f57600080fd5b60405161096c38038061096c833981016040528080518201919060200180518201919060200180519150505b600283805161004e9291602001906100a0565b5060038280516100629291602001906100a0565b5060048054600160a060020a03328116600160a060020a0319928316179092556005805492841692909116919091179055426000555b505050610140565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e157805160ff191683800117855561010e565b8280016001018555821561010e579182015b8281111561010e5782518255916020019190600101906100f3565b5b5061011b92915061011f565b5090565b61013d91905b8082111561011b5760008155600101610125565b5090565b90565b61081d8061014f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632fd949ca811461006957806382996d9f1461007e578063b4bd778414610109578063ba83e2a6146101b5578063d9e8843f146101da575b600080fd5b341561007457600080fd5b61007c6101e7565b005b341561008957600080fd5b61009161027c565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100ce5780820151818401525b6020016100b5565b50505050905090810190601f1680156100fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561011457600080fd5b61011c61031a565b60405160208101849052600160a060020a0380841660408301528216606082015260808082528190810186818151815260200191508051906020019080838360005b838110156101775780820151818401525b60200161015e565b50505050905090810190601f1680156101a45780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34156101c057600080fd5b6101c8610561565b60405190815260200160405180910390f35b61007c600435610567565b005b60045433600160a060020a0390811691161461020257600080fd5b600454600160a060020a039081169030163180156108fc0290604051600060405180830381858888f19350505050151561023b57600080fd5b600580546002919074ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000835b02179055505b5b565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103125780601f106102e757610100808354040283529160200191610312565b820191906000526020600020905b8154815290600101906020018083116102f557829003601f168201915b505050505081565b61032261079f565b600080600061032f61079f565b600260405180591061033e5750595b90808252806020026020018201604052801561037457816020015b6103616107c3565b8152602001906001900390816103595790505b50905061041a60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104105780601f106103e557610100808354040283529160200191610410565b820191906000526020600020905b8154815290600101906020018083116103f357829003601f168201915b50505050506105fb565b8160008151811061042757fe5b906020019060200201819052506104d760038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104105780601f106103e557610100808354040283529160200191610410565b820191906000526020600020905b8154815290600101906020018083116103f357829003601f168201915b50505050506105fb565b816001815181106104e457fe5b6020908102909101015261053a8161052e60408051908101604052600181527f2c0000000000000000000000000000000000000000000000000000000000000060208201526105fb565b9063ffffffff61062516565b600054600554600454929750909550600160a060020a0390811694501691505b5090919293565b60015481565b60055433600160a060020a0390811691161461058257600080fd5b6001805b60055474010000000000000000000000000000000000000000900460ff1660028111156105af57fe5b146105b957600080fd5b600454600160a060020a031682156108fc0283604051600060405180830381858888f1935050505015156105ec57600080fd5b60018054810190555b5b505b50565b6106036107c3565b6020820160408051908101604052808451815260200182905291505b50919050565b61062d61079f565b60008061063861079f565b60008551151561065857602060405190810160405260008152945061074e565b60018651038751029350600092505b85518310156106975785838151811061067c57fe5b9060200190602002015151840193505b600190920191610667565b836040518059106106a55750595b908082528060200260200182016040525b5060009350915050602081015b855183101561074a57610706818785815181106106dc57fe5b90602001906020020151602001518886815181106106f657fe5b9060200190602002015151610758565b85838151811061071257fe5b906020019060200201515101600186510383101561073e5761073a8188602001518951610758565b8651015b5b6001909201916106c3565b8194505b5050505092915050565b60005b6020821061077f57825184526020840193506020830192505b60208203915061075b565b6001826020036101000a0390508019835116818551161784525b50505050565b60206040519081016040526000815290565b60206040519081016040526000815290565b604080519081016040526000808252602082015290565b6040805190810160405260008082526020820152905600a165627a7a723058208857e737810911f0777fb273d71d0d88f93b49c72b27b938a646b7e724df8d5a0029";

    private RentalAgreement(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private RentalAgreement(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<TransactionReceipt> terminateContract() {
        Function function = new Function("terminateContract", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> rent() {
        Function function = new Function("rent", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<List<Type>> getAgreementDetails() {
        Function function = new Function("getAgreementDetails", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        return executeCallMultipleValueReturnAsync(function);
    }

    public Future<Uint256> rentPaidCount() {
        Function function = new Function("rentPaidCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> payRent(Uint256 rent) {
        Function function = new Function("payRent", Arrays.<Type>asList(rent), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public static Future<RentalAgreement> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Utf8String _rent, Utf8String _PropertyRegNo, Address _tenant) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_rent, _PropertyRegNo, _tenant));
        return deployAsync(RentalAgreement.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Future<RentalAgreement> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Utf8String _rent, Utf8String _PropertyRegNo, Address _tenant) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_rent, _PropertyRegNo, _tenant));
        return deployAsync(RentalAgreement.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static RentalAgreement load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new RentalAgreement(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static RentalAgreement load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new RentalAgreement(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
