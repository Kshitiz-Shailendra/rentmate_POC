package com.sap.bkc.dao.contractWrappers;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Future;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.2.1.
 */
public final class Property extends Contract {
    private static final String BINARY = "6060604052341561000f57600080fd5b604051610ad0380380610ad08339810160405280805182019190602001805182019190602001805182019190602001805182019190602001805182019190602001805182019190602001805190910190505b6000878051610074929160200190610119565b506001868051610088929160200190610119565b50600385805161009c929160200190610119565b5060048480516100b0929160200190610119565b5060068380516100c4929160200190610119565b5060078280516100d8929160200190610119565b5060088180516100ec929160200190610119565b5060058054600160a060020a03191632600160a060020a0316179055426002555b505050505050506101b9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015a57805160ff1916838001178555610187565b82800160010185558215610187579182015b8281111561018757825182559160200191906001019061016c565b5b50610194929150610198565b5090565b6101b691905b80821115610194576000815560010161019e565b5090565b90565b610908806101c86000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416639d5d2fbe811461003d575b600080fd5b341561004857600080fd5b6100506100ed565b60405173ffffffffffffffffffffffffffffffffffffffff831660208201526040810182905260608082528190810185818151815260200191508051906020019080838360005b838110156100b05780820151818401525b602001610097565b50505050905090810190601f1680156100dd5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6100f561088a565b60008061010061088a565b600760405180591061010f5750595b90808252806020026020018201604052801561014557816020015b6101326108ae565b81526020019060019003908161012a5790505b5090506101eb60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101e15780601f106101b6576101008083540402835291602001916101e1565b820191906000526020600020905b8154815290600101906020018083116101c457829003601f168201915b50505050506106e6565b816000815181106101f857fe5b906020019060200201819052506102a860018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101e15780601f106101b6576101008083540402835291602001916101e1565b820191906000526020600020905b8154815290600101906020018083116101c457829003601f168201915b50505050506106e6565b816001815181106102b557fe5b9060200190602002018190525061036560038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101e15780601f106101b6576101008083540402835291602001916101e1565b820191906000526020600020905b8154815290600101906020018083116101c457829003601f168201915b50505050506106e6565b8160028151811061037257fe5b9060200190602002018190525061042260048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101e15780601f106101b6576101008083540402835291602001916101e1565b820191906000526020600020905b8154815290600101906020018083116101c457829003601f168201915b50505050506106e6565b8160038151811061042f57fe5b906020019060200201819052506104df60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101e15780601f106101b6576101008083540402835291602001916101e1565b820191906000526020600020905b8154815290600101906020018083116101c457829003601f168201915b50505050506106e6565b816004815181106104ec57fe5b9060200190602002018190525061059c60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101e15780601f106101b6576101008083540402835291602001916101e1565b820191906000526020600020905b8154815290600101906020018083116101c457829003601f168201915b50505050506106e6565b816005815181106105a957fe5b9060200190602002018190525061065960088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101e15780601f106101b6576101008083540402835291602001916101e1565b820191906000526020600020905b8154815290600101906020018083116101c457829003601f168201915b50505050506106e6565b8160068151811061066657fe5b602090810290910101526106bc816106b060408051908101604052600181527f2c0000000000000000000000000000000000000000000000000000000000000060208201526106e6565b9063ffffffff61071016565b60055460025491955073ffffffffffffffffffffffffffffffffffffffff16935091505b50909192565b6106ee6108ae565b6020820160408051908101604052808451815260200182905291505b50919050565b61071861088a565b60008061072361088a565b600085511515610743576020604051908101604052600081529450610839565b60018651038751029350600092505b85518310156107825785838151811061076757fe5b9060200190602002015151840193505b600190920191610752565b836040518059106107905750595b908082528060200260200182016040525b5060009350915050602081015b8551831015610835576107f1818785815181106107c757fe5b90602001906020020151602001518886815181106107e157fe5b9060200190602002015151610843565b8583815181106107fd57fe5b9060200190602002015151016001865103831015610829576108258188602001518951610843565b8651015b5b6001909201916107ae565b8194505b5050505092915050565b60005b6020821061086a57825184526020840193506020830192505b602082039150610846565b6001826020036101000a0390508019835116818551161784525b50505050565b60206040519081016040526000815290565b60206040519081016040526000815290565b604080519081016040526000808252602082015290565b6040805190810160405260008082526020820152905600a165627a7a7230582022ced9a50377b23ac822a4145197860016861e10762d7e6ad2324984d2d480490029";

    private Property(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Property(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<List<Type>> getPropertydetails() {
        Function function = new Function("getPropertydetails", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return executeCallMultipleValueReturnAsync(function);
    }

    public static Future<Property> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Utf8String _rent, Utf8String _securityDeposit, Utf8String _PropertyRegNo, Utf8String _PropertyAddr, Utf8String _ownerName, Utf8String _houseSize, Utf8String _aboutProperty) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_rent, _securityDeposit, _PropertyRegNo, _PropertyAddr, _ownerName, _houseSize, _aboutProperty));
        return deployAsync(Property.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Future<Property> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Utf8String _rent, Utf8String _securityDeposit, Utf8String _PropertyRegNo, Utf8String _PropertyAddr, Utf8String _ownerName, Utf8String _houseSize, Utf8String _aboutProperty) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_rent, _securityDeposit, _PropertyRegNo, _PropertyAddr, _ownerName, _houseSize, _aboutProperty));
        return deployAsync(Property.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Property load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Property(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Property load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Property(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
