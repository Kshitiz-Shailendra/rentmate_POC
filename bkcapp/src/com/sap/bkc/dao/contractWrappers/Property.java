package com.sap.bkc.dao.contractWrappers;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Future;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.2.1.
 */
public final class Property extends Contract {
    private static final String BINARY = "6060604052341561000c57fe5b604051610aaf380380610aaf83398101604090815281516020830151918301516060840151608085015160a086015160c0870151948701969586019593840194928401939182019290820191015b865161006d9060009060208a0190610112565b508551610081906001906020890190610112565b508451610095906003906020880190610112565b5083516100a9906004906020870190610112565b5082516100bd906006906020860190610112565b5081516100d1906007906020850190610112565b5080516100e5906008906020840190610112565b5060058054600160a060020a03191632600160a060020a0316179055426002555b505050505050506101b2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015357805160ff1916838001178555610180565b82800160010185558215610180579182015b82811115610180578251825591602001919060010190610165565b5b5061018d929150610191565b5090565b6101af91905b8082111561018d5760008155600101610197565b5090565b90565b6108ee806101c16000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416639d5d2fbe811461003a575bfe5b341561004257fe5b61004a610109565b60405180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281038252858181518152602001915080519060200190808383600083146100cd575b8051825260208311156100cd57601f1990920191602091820191016100ad565b505050905090810190601f1680156100f95780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b610111610870565b6000600061011d610870565b600760405180591061012c5750595b90808252806020026020018201604052801561016257816020015b61014f610894565b8152602001906001900390816101475790505b506000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529394506101fa9392918301828280156101f05780601f106101c5576101008083540402835291602001916101f0565b820191906000526020600020905b8154815290600101906020018083116101d357829003601f168201915b50505050506106b4565b81600081518110151561020957fe5b6020908102919091018101919091526001805460408051600283851615610100026000190190931692909204601f81018590048502830185019091528082526102aa939192918301828280156101f05780601f106101c5576101008083540402835291602001916101f0565b820191906000526020600020905b8154815290600101906020018083116101d357829003601f168201915b50505050506106b4565b8160018151811015156102b957fe5b602090810291909101810191909152600380546040805160026001841615610100026000190190931692909204601f810185900485028301850190915280825261035b939192918301828280156101f05780601f106101c5576101008083540402835291602001916101f0565b820191906000526020600020905b8154815290600101906020018083116101d357829003601f168201915b50505050506106b4565b81600281518110151561036a57fe5b602090810291909101810191909152600480546040805160026001841615610100026000190190931692909204601f810185900485028301850190915280825261040c939192918301828280156101f05780601f106101c5576101008083540402835291602001916101f0565b820191906000526020600020905b8154815290600101906020018083116101d357829003601f168201915b50505050506106b4565b81600381518110151561041b57fe5b602090810291909101810191909152600680546040805160026001841615610100026000190190931692909204601f81018590048502830185019091528082526104bd939192918301828280156101f05780601f106101c5576101008083540402835291602001916101f0565b820191906000526020600020905b8154815290600101906020018083116101d357829003601f168201915b50505050506106b4565b8160048151811015156104cc57fe5b602090810291909101810191909152600780546040805160026001841615610100026000190190931692909204601f810185900485028301850190915280825261056e939192918301828280156101f05780601f106101c5576101008083540402835291602001916101f0565b820191906000526020600020905b8154815290600101906020018083116101d357829003601f168201915b50505050506106b4565b81600581518110151561057d57fe5b602090810291909101810191909152600880546040805160026001841615610100026000190190931692909204601f810185900485028301850190915280825261061f939192918301828280156101f05780601f106101c5576101008083540402835291602001916101f0565b820191906000526020600020905b8154815290600101906020018083116101d357829003601f168201915b50505050506106b4565b81600681518110151561062e57fe5b9060200190602002018190525061068a8161067e604060405190810160405280600181526020017f2c000000000000000000000000000000000000000000000000000000000000008152506106b4565b9063ffffffff6106dd16565b60055460025491955073ffffffffffffffffffffffffffffffffffffffff16935091505b50909192565b6106bc610894565b50604080518082019091528151815260208281019082018190525b50919050565b6106e5610870565b600060006106f1610870565b600085516000141561071357604080516020810190915260008152945061081d565b60018651038760000151029350600092505b855183101561075a57858381518110151561073c57fe5b9060200190602002015160000151840193505b600190920191610725565b836040518059106107685750595b908082528060200260200182016040525b5060009350915050602081015b8551831015610819576107cd8187858151811015156107a157fe5b906020019060200201516020015188868151811015156107bd57fe5b6020908102909101015151610827565b85838151811015156107db57fe5b602090810290910101515186519101906000190183101561080d576108098188602001518960000151610827565b8651015b5b600190920191610786565b8194505b5050505092915050565b60005b6020821061084c5782518452602093840193909201915b60208203915061082a565b6001826020036101000a039050801983511681855116818117865250505b50505050565b60408051602081019091526000815290565b60408051602081019091526000815290565b604080518082019091526000808252602082015290565b6040805180820190915260008082526020820152905600a165627a7a723058207c4d47518b137e2be43e230c0b032e2b328a6f02ef780bcab7c3bdf1771105210029";

    private Property(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Property(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<List<Type>> getPropertydetails() {
        Function function = new Function("getPropertydetails", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return executeCallMultipleValueReturnAsync(function);
    }

    public static Future<Property> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Utf8String _rent, Utf8String _securityDeposit, Utf8String _PropertyRegNo, Utf8String _PropertyAddr, Utf8String _ownerName, Utf8String _houseSize, Utf8String _aboutProperty) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_rent, _securityDeposit, _PropertyRegNo, _PropertyAddr, _ownerName, _houseSize, _aboutProperty));
        return deployAsync(Property.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Future<Property> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Utf8String _rent, Utf8String _securityDeposit, Utf8String _PropertyRegNo, Utf8String _PropertyAddr, Utf8String _ownerName, Utf8String _houseSize, Utf8String _aboutProperty) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_rent, _securityDeposit, _PropertyRegNo, _PropertyAddr, _ownerName, _houseSize, _aboutProperty));
        return deployAsync(Property.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Property load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Property(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Property load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Property(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
